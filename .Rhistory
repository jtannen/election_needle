new(
"Condition",
name="contested",
formula=contested_form,
filter_func=function(df) {
abs(df$dem_is_uncontested) != 1 & df$sth_frac_contested_lagged > 0.5
},
warn=TRUE
)
)
add_cols <- function(df0){
df0$dem_won_lagged <- df0$sth_pctdem_lagged > 0.5
df0$incumbent_is_running <- abs(df0$incumbent_is_dem)
df0$uspgov_is_usp <- (asnum(df0$year) %% 4) == 0
df0
}
vote_df <- vote_df %>% add_cols
get_holdout_set <- function(df0, holdout_year){
ifelse(df0$year %in% holdout_year, "test", "train")
}
add_condition <- function(df0, conditions){
df0$condition <- NA
for(condition in conditions){
if(!is(condition, "Condition")) stop("condition is not of class Condition")
df0$condition[condition@filter_func(df0)] <- condition@name
}
if(any(is.na(df0$condition))) warning("the conditions don't cover the full dataset")
return(df0)
}
## can't use 2002 since it doesn't have lagged data
vote_df <- vote_df %>% filter(year > 2002)
vote_df <- vote_df %>% add_condition(conditions)
fit_once <- function(df0, holdout_year, conditions, verbose = TRUE){
df0$set <- get_holdout_set(df0, holdout_year)
df0$pred <- NA
coef_results <- list()
sd_err <- list()
for(cond in conditions){
if(!cond@warn) wrapper <- suppressWarnings else wrapper <- identity
fit <- wrapper(
lm(
cond@formula,
data = df0 %>% filter(condition == cond@name & set == "train")
)
)
sd_err[cond@name] <- sd(fit$residuals)
coef_results[[cond@name]] <- broom::tidy(fit) %>%
mutate(condition=cond@name)
df0$pred[df0$condition == cond@name] <- predict(
fit,
newdata = df0[df0$condition == cond@name,]
)
if(verbose) {
print(sprintf("%s Model", cond@name))
print(wrapper(summary(fit)))
}
}
## estimate sd of year random effects
year_re <- df0 %>%
filter(condition != "uncontested" & set == "train") %>%
group_by(year) %>%
summarise(re = mean(sth_pctdem - pred))
year_sd <- sd(year_re$re)
resid_sd <- sapply(
sd_err[names(sd_err) != "uncontested"],
function(e) sqrt(e^2 - year_sd^2)
)
summary_stat_df <- data.frame(
stat = c("year_sd", paste0("resid_sd_", names(resid_sd))),
value = c(year_sd, unlist(resid_sd))
)
## this is a noisy estimate, where we generate a sample with year effect and residual noise
sample <- df0 %>%
filter(set == 'test') %>%
mutate(
pred_samp = pred +
ifelse(
condition == "uncontested", 0,
rnorm(n(), mean=0, sd=resid_sd[condition]) +
rnorm(1, mean=0, sd=year_sd)
)
) %>%
select(race, sth, condition, pred, pred_samp)
return(new(
"FitResult",
pred=df0[,c("sth", "year", "pred")],
coefs=do.call(rbind, coef_results),
test_sample=sample,
holdout_year=as.integer(holdout_year),
summary_stats=summary_stat_df
))
}
results_once <- fit_once(
vote_df,
2016,
conditions
)
supplement_pred <- function(pred, holdout_year, df0=vote_df){
pred_supplemented <- pred %>% left_join(
df0 %>%
mutate(set = get_holdout_set(., holdout_year)) %>%
select(sth, year, race, condition, set, sth_pctdem),
by = c("sth", "year")
)
if(!nrow(pred) == nrow(pred_supplemented)) stop("rows were duplicated")
return(pred_supplemented)
}
supplement_pred_from_fit <- function(fr, df0=vote_df){
supplement_pred(fr@pred, fr@holdout_year, df0)
}
prediction_plot <- function(fr, condition_name){
if(!is(fr, "FitResult")) stop("fr must be of type FitResult")
if(!condition_name %in% unique(fr@coefs$condition)) {
stop("condition doesn't match available conditions")
}
ggplot(
fr %>%
supplement_pred_from_fit() %>%
filter(condition == condition_name),
aes(x = pred, y = sth_pctdem)
) +
geom_point() +
geom_abline(slope=1, intercept=0) +
geom_hline(yintercept = 0.5, color = "grey50")+
geom_vline(xintercept = 0.5, color = "grey50")+
facet_grid(~set) +
coord_fixed() +
ggtitle(sprintf("Predicted values of %s model, %s", condition_name, fr@holdout_year))
}
prediction_plot(results_once, "contested")
prediction_plot(results_once, "previously_uncontested")
prediction_plot(results_once, "uncontested")
setClass(
## BootstrapResult is like FitResult but dfs will have column `sim`
"BootstrapResult",
slots=c(
nboot="numeric"
),
contains="FitResult"
)
rbind_slots <- function(obj_list, result_slot){
bind_rows(
lapply(obj_list, slot, result_slot),
.id = "sim"
)
}
construct_bsresult <- function(fitresult_list){
nboot <- length(fitresult_list)
holdout_year <- unique(sapply(fitresult_list, slot, "holdout_year"))
bs <- new("BootstrapResult", nboot=nboot, holdout_year=as.integer(holdout_year))
for(sl in c("pred","coefs","test_sample")){
slot(bs, sl) <- rbind_slots(fitresult_list, sl)
}
return(bs)
}
bootstrap <- function(df0, holdout_year, conditions, nboot=500, verbose=TRUE, ...){
fitresult_list <- list()
years <- as.character(seq(2004, 2016, 2))
train_years <- years[!years %in% holdout_year]
n_train_years <- length(years)
df0 <- df0 %>% mutate(year = as.character(year))
for(i in 1:nboot){
bs_year_samp <- data.frame(year = sample(train_years, replace=TRUE))
bsdf <- rbind(
bs_year_samp %>% left_join(df0, by = "year"),
df0 %>% filter(get_holdout_set(., holdout_year) == "test")
)
fitresult_list[[i]] <- fit_once(bsdf, holdout_year, conditions, verbose=FALSE, ...)
if(verbose & (i %% 100 == 0)) print(i)
}
return(
construct_bsresult(fitresult_list)
)
}
bs <- bootstrap(
vote_df,
2016,
conditions,
verbose=TRUE
)
coef_plot <- function(bs, condition_name='contested'){
coef_df <- bs@coefs %>%
filter(condition == condition_name)
ggplot(
coef_df,
aes(x=term, y=estimate)
) +
geom_boxplot(outlier.color = NA) +
theme_sixtysix() +
theme(axis.text.x = element_text(angle = 90, hjust=1, vjust=0.5)) +
ylim(-1,1)+
ggtitle(
paste("Coefficients of", condition_name),
paste("Holdout:", bs@holdout_year)
)
}
coef_plot(bs, 'contested')
coef_plot(bs, 'previously_uncontested')
coef_plot(bs, 'uncontested')
get_pred_with_true_results <- function(bs){
true_results <- bs@pred %>%
filter(year == bs@holdout_year) %>%
supplement_pred(bs@holdout_year)
true_results
}
gg_race_pred <- function(bs){
holdout_year <- bs@holdout_year
true_results <- get_pred_with_true_results(bs)
race_order <- bs@test_sample %>%
group_by(race) %>%
summarise(m = mean(pred_samp)) %>%
with(race[order(m)])
ggplot(
bs@test_sample %>% mutate(race = factor(race, levels = race_order)),
aes(x=race, y=pred_samp)
) +
geom_hline(yintercept=0.5, size=1, color = 'grey30')+
geom_boxplot(outlier.colour = NA, alpha = 0.5)+
geom_point(
data = true_results,
aes(y=sth_pctdem),
color="blue"
) +
theme_sixtysix()+
theme(
panel.grid.major.x = element_blank(),
axis.text.x = element_blank()
) +
xlab("race (sorted by predicted pct dem)") +
scale_y_continuous("pct dem", breaks = seq(0,1,0.25))+
ggtitle(paste("Race-by-race predictions for", holdout_year), "Blue is actual results.")
}
gg_race_pred(bs)
coef_plot(bs, 'contested')
gg_race_scatter <- function(bs){
holdout_year <- bs@holdout_year
true_results <- get_pred_with_true_results(bs)
ggplot(
bs@test_sample %>%
group_by(race, sth, condition) %>%
summarise(
ymean = mean(pred_samp),
ymin = quantile(pred_samp, 0.025),
ymax = quantile(pred_samp, 0.975)
) %>%
left_join(true_results),
aes(x=sth_pctdem, y=ymean)
) +
geom_abline(slope=1, size=1, color = 'grey30')+
geom_linerange(
aes(ymin=ymin, ymax=ymax, group=race)
)+
geom_point(
aes(y=ymean, color=condition)
) +
theme_sixtysix()+
xlab("True Result") +
scale_y_continuous("Prediction", breaks = seq(0,1,0.25))+
coord_fixed() +
ggtitle("Race prediction intervals", holdout_year)
}
gg_race_scatter(bs)
gg_resid <- function(bs){
holdout_year <- bs@holdout_year
true_results <- get_pred_with_true_results(bs)
pctl <- bs@test_sample %>%
filter(condition != "uncontested") %>%
left_join(true_results) %>%
group_by(race, sth, condition) %>%
summarise(pctl = mean(sth_pctdem > pred_samp))
ggplot(pctl, aes(x=pctl, fill = condition)) +
geom_histogram(binwidth = 0.05) +
scale_fill_manual(
values = c(
contested = strong_green,
previously_uncontested = strong_purple
)
) +
theme_sixtysix()
}
gg_resid(bs)
map_residuals <- function(bs, cond_name, df0=vote_df){
holdout_year <- bs@holdout_year
sf_vintage <- sth_vintage %>% filter(year==holdout_year) %>% with(vintage)
sf <- sth_sf %>% filter(vintage == sf_vintage)
bs_pred <- bs@test_sample %>%
group_by(sth, race, condition) %>%
summarise(
pred = mean(pred)
) %>%
left_join(df0 %>% select(race, sth_pctdem)) %>%
mutate(resid = sth_pctdem - pred)
ggplot(
sf %>%
left_join(bs_pred %>% filter(condition == cond_name))
) +
geom_sf(data = pa_union) +
geom_point(
aes(x=x, y=y, size=abs(resid), color=ifelse(resid < 0, "Dem", "Rep"))
) +
scale_color_manual(
values=c(Dem = strong_blue, Rep = strong_red),
guide=FALSE
) +
scale_size_area(guide = FALSE) +
theme_map_sixtysix() +
ggtitle(
paste("Residual Map for", holdout_year,",", cond_name,"model"),
"Blue means Dem overpredicted, Red means Rep"
)
}
map_residuals(bs, "contested")
pivotal_bs <- function(x, q){
mean_x <- mean(x)
q0 <- 1 - q
raw_quantiles <- quantile(x, q0)
true_quantiles <- 2 * mean_x - raw_quantiles
names(true_quantiles) <- scales::percent(q)
return(true_quantiles)
}
gg_pred_hist(bs)
gg_pred_hist <- function(bs, true_line=TRUE, df0=vote_df){
holdout_year <- bs@holdout_year
print("bootstrapped predictions")
pred_total <- bs@test_sample %>%
group_by(sim) %>%
summarise(n_dem_wins = sum(pred_samp > 0.5)) %>%
group_by()
print(paste("Total NA:", sum(is.na(pred_total$n_dem_wins))))
pred_total <- pred_total %>% filter(!is.na(n_dem_wins))
print(mean(pred_total$n_dem_wins))
print(pivotal_bs(pred_total$n_dem_wins, c(0.025, 0.2, 0.8, 0.975)))
if(true_line){
print("actual results")
true_dem_wins <- df0[df0$year == holdout_year,] %>% with(sum(sth_pctdem > 0.5))
print(true_dem_wins)
gg_annotation <- function()
annotate(
geom="text",
x = true_dem_wins,
y = 10,
angle = 90,
hjust = 0,
vjust = 1.1,
label = paste("True outcome =", true_dem_wins)
)
} else {
true_dem_wins <- numeric(0)
gg_annotation <- geom_blank
}
ggplot(pred_total, aes(x = n_dem_wins, fill = n_dem_wins < 101.5)) +
geom_histogram(binwidth = 1) +
geom_vline(xintercept = true_dem_wins) +
gg_annotation() +
ggtitle(paste("Predicted Democratic seats in", holdout_year)) +
xlab("N Democratic Seats") +
ylab("N Bootstrap Sims") +
theme_sixtysix() +
scale_fill_manual(
values = c(`TRUE`=strong_red, `FALSE` = strong_blue),
guide = FALSE
)
}
gg_pred_hist(bs)
bs_years <- list()
for(holdout in seq(2004, 2016, 2)){
print(paste("###", holdout, "###"))
bs_years[[as.character(holdout)]] <- bootstrap(
vote_df,
holdout,
conditions,
verbose=FALSE
)
}
for(holdout in seq(2004, 2016, 2)){
gg_pred_hist(bs_years[[as.character(holdout)]]) %>% print()
}
gg_race_pred(bs_years[['2010']])
gg_race_scatter(bs_years[['2010']])
map_residuals(bs_years[['2010']], "contested")
coef_df <- do.call(
rbind,
lapply(
bs_years,
function(bs) {
bs@coefs %>%
group_by(term, condition) %>%
summarise(estimate=mean(estimate)) %>%
mutate(year = bs@holdout_year)
}
)
)
ggplot(
coef_df,
aes(x = interaction(condition, term), y=estimate)
) +
geom_point(aes(color = (year == 2010))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
load("outputs/df_2018.rda")
df_2018 <- df_2018 %>% add_cols()
df_2018 <- add_condition(df_2018, conditions)
vote_df <- bind_rows(vote_df, df_2018)
pred_2018 <- bootstrap(
vote_df,
holdout_year=2018,
conditions=conditions
)
pred_2018 <- bootstrap(
vote_df,
holdout_year=2018,
conditions=conditions
)
gg_race_pred(pred_2018)
gg_pred_hist(pred_2018, true_line = FALSE)
results_2018 <- read.csv(
"data/UnOfficial_11232018092637AM.CSV"
) %>%
mutate(
vote_total = asnum(gsub("\\,","",Votes)),
sth = sprintf("%03d", asnum(gsub("^([0-9]+)[a-z].*", "\\1", District.Name))),
party = ifelse(
Party.Name == "Democratic", "DEM",
ifelse(Party.Name == "Republican", "REP", NA)
)
) %>%
mutate(
party = replace(
party,
Candidate.Name %in% c(
"BERNSTINE, AARON JOSEPH ",  "SANKEY, THOMAS R III", "GABLER, MATTHEW M "),
"REP"
),
party = replace(party, Candidate.Name == "LONGIETTI, MARK ALFRED ", "DEM")
) %>%
filter(!is.na(party)) %>%
group_by(sth, party) %>%
summarise(votes = sum(vote_total)) %>%
group_by(sth) %>%
summarise(sth_pctdem = sum(votes * (party == "DEM")) / sum(votes))
vote_df <- left_join(vote_df, results_2018, by = "sth", suffix = c("",".2018")) %>%
mutate(
sth_pctdem = ifelse(
substr(race,1,4)=="2018",
sth_pctdem.2018,
sth_pctdem
)
) %>% select(-sth_pctdem.2018)
gg_pred_hist(pred_2018)
knitr::opts_chunk$set(
knitr::opts_chunk$set(
echo = TRUE,
warning=FALSE,
message=FALSE,
dpi=300,
root.dir = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/"
)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/")
source("../../admin_scripts/util.R")
knitr::opts_chunk$set(
echo = TRUE,
warning=FALSE,
message=FALSE,
dpi=300,
root.dir = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/",
fig.height=8,
fig.width=8
)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/")
source("../../admin_scripts/util.R")
histogram_simulation(
district_3_938$office_sim_total,
"Gauthier",
final_d3,
"9:38",
50,
ndigits=0
)
library(tidyverse)
library(tidyverse)
library(sf)
source("../../admin_scripts/util.R")
should_download <- FALSE
use_maps <- FALSE
use_saved_covariance <- TRUE
use_log <- TRUE
use_latest_file <- FALSE
source("needle.R")
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/")
source("../../admin_scripts/util.R")
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/")
list.files()
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/")
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/")
list.files()
list.files("raw_data")
df_738 <- load_data("PRECINCT_2019521_H19_M58_S25.txt")
df_758 <- load_data("PRECINCT_2019521_H19_M58_S25.txt")
knitr::opts_chunk$set(
echo = TRUE,
warning=FALSE,
message=FALSE,
dpi=300,
root.dir = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/",
fig.height=6,
fig.width=6
)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_needle/")
source("../../admin_scripts/util.R")
council_at_large_838$needle %+%
(council_at_large_838$needle$data %>% filter(candidate %in% use_cands)) +
theme(strip.text = element_text(face="bold", size = 12)) +
ggtitle("At Large probability of winning as of 8:38", "Rivera Reyes had the other 16% chance.")
